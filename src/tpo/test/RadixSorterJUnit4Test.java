package tpo.test;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import tpo.lab1.RadixSorter;

import java.util.HashMap;
import java.util.Map;

import static junit.framework.TestCase.assertEquals;

/**
 * Created by nebyt on 26.03.2017.
 */
public class RadixSorterJUnit4Test {

    private HashMap<int[], String> basicTests = new HashMap<int[], String>();

    @Before
    public void setup() {
        basicTests.put(new int[]{70, 326, 120, 18, 560, 685, 888, 938, 139, 96},
                "[70,326,120,18,560,685,888,938,139,96]\n" +
                        "[3,0,0,0,0,1,2,0,3,1]\n" +
                        "[70,120,560,685,326,96,18,888,938,139]\n" +
                        "[0,1,2,2,0,0,1,1,2,1]\n" +
                        "[18,120,326,938,139,560,70,685,888,96]\n" +
                        "[3,2,0,1,0,1,1,0,1,1]\n" +
                        "[18,70,96,120,139,326,560,685,888,938]\n" +
                        "[10,0,0,0,0,0,0,0,0,0]\n" +
                        "[18,70,96,120,139,326,560,685,888,938]");
        basicTests.put(new int[]{275, 768, 247, 529, 533, 173, 75, 301, 393, 435, 699, 758, 880, 900, 583},
                "[275,768,247,529,533,173,75,301,393,435,699,758,880,900,583]\n" +
                        "[2,1,0,4,0,3,0,1,2,2]\n" +
                        "[880,900,301,533,173,393,583,275,75,435,247,768,758,529,699]\n" +
                        "[2,0,1,2,1,1,1,3,2,2]\n" +
                        "[900,301,529,533,435,247,758,768,173,275,75,880,583,393,699]\n" +
                        "[1,1,2,2,1,3,1,2,1,1]\n" +
                        "[75,173,247,275,301,393,435,529,533,583,699,758,768,880,900]\n" +
                        "[15,0,0,0,0,0,0,0,0,0]\n" +
                        "[75,173,247,275,301,393,435,529,533,583,699,758,768,880,900]");
        basicTests.put(new int[]{4, 24, 93, 5, 81, 64, 77},
                        "[4,24,93,5,81,64,77]\n" +
                        "[0,1,0,1,3,1,0,1,0,0]\n" +
                        "[81,93,4,24,64,5,77]\n" +
                        "[2,0,1,0,0,0,1,1,1,1]\n" +
                        "[4,5,24,64,77,81,93]\n" +
                        "[7,0,0,0,0,0,0,0,0,0]\n" +
                        "[4,5,24,64,77,81,93]");
                basicTests.put(new int[]{2330, 5150, 2810, 2550, 8701, 498, 5011, 3367, 8061, 7472, 3170, 7084, 9349, 789, 1482, 3536, 8324, 7218, 9726, 2212},
                        "[2330,5150,2810,2550,8701,498,5011,3367,8061,7472,3170,7084,9349,789,1482,3536,8324,7218,9726,2212]\n" +
                                "[5,3,3,0,2,0,2,1,2,2]\n" +
                                "[2330,5150,2810,2550,3170,8701,5011,8061,7472,1482,2212,7084,8324,3536,9726,3367,498,7218,9349,789]\n" +
                                "[1,4,2,2,1,2,2,2,3,1]\n" +
                                "[8701,2810,5011,2212,7218,8324,9726,2330,3536,9349,5150,2550,8061,3367,3170,7472,1482,7084,789,498]\n" +
                                "[3,2,2,4,3,2,0,3,1,0]\n" +
                                "[5011,8061,7084,5150,3170,2212,7218,8324,2330,9349,3367,7472,1482,498,3536,2550,8701,9726,789,2810]\n" +
                                "[2,1,4,3,0,2,0,3,3,2]\n" +
                                "[498,789,1482,2212,2330,2550,2810,3170,3367,3536,5011,5150,7084,7218,7472,8061,8324,8701,9349,9726]\n" +
                                "[20,0,0,0,0,0,0,0,0,0]\n" +
                                "[498,789,1482,2212,2330,2550,2810,3170,3367,3536,5011,5150,7084,7218,7472,8061,8324,8701,9349,9726]");
    }

    @Test
    public void testSort() {
        RadixSorter rs = new RadixSorter();
        int[] array;
        for (Map.Entry entry : basicTests.entrySet()) {
            array = (int[]) entry.getKey();
            assertEquals(entry.getValue(), rs.sort(array));
        }
    }

    @After
    public void clear() {
        basicTests = null;
    }
}
